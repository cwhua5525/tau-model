plot(samples$u1, type = "l", main = "Trace: u1", ylab = expression(u[1]), xlab = "Iteration")
acf(samples$u1, main = "ACF: u1")
# Trace + ACF for v_U
plot(samples$v_U, type = "l", main = "Trace: v_U", ylab = expression(v[U]), xlab = "Iteration")
acf(samples$v_U, main = "ACF: v_U")
par(mfrow = c(3, 2))
# Trace + ACF for beta0
plot(samples$beta0, type = "l", main = "Trace: beta0", ylab = expression(beta[0]), xlab = "Iteration")
acf(samples$beta0, main = "ACF: beta0")
# Trace + ACF for u1
plot(samples$u1, type = "l", main = "Trace: u1", ylab = expression(u[1]), xlab = "Iteration")
acf(samples$u1, main = "ACF: u1")
# Trace + ACF for v_U
plot(samples$v_U, type = "l", main = "Trace: v_U", ylab = expression(v[U]), xlab = "Iteration")
acf(samples$v_U, main = "ACF: v_U")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q3d.R")
# ---- Burn-in removal ----
burnin <- 2000
samples_post <- samples[(burnin + 1):nrow(samples), ]  # Keep 2001 to 10000
# ---- Recompute v_U if not already present ----
samples_post$v_U <- exp(samples_post$log_vU)
# ---- Posterior Summary After Burn-in ----
summary_df_burn <- data.frame(
Parameter = c(paste0("beta", 0:2), paste0("u", 1:3), "v_U"),
True = c(beta_true, u_true[1:3], vU_true),
PosteriorMean = colMeans(samples_post[, c("beta0", "beta1", "beta2", "u1", "u2", "u3", "v_U")]),
Q2.5 = apply(samples_post[, c("beta0", "beta1", "beta2", "u1", "u2", "u3", "v_U")], 2, quantile, 0.025),
Q50 = apply(samples_post[, c("beta0", "beta1", "beta2", "u1", "u2", "u3", "v_U")], 2, quantile, 0.5),
Q97.5 = apply(samples_post[, c("beta0", "beta1", "beta2", "u1", "u2", "u3", "v_U")], 2, quantile, 0.975)
)
# Print summary
print(summary_df_burn, digits = 4, row.names = FALSE)
# ---- Trace + ACF plots after burn-in ----
par(mfrow = c(3, 2))  # layout: 3 rows, 2 cols
# beta0
plot(samples_post$beta0, type = "l", main = "Trace (burn-in removed): beta0",
ylab = expression(beta[0]), xlab = "Iteration")
acf(samples_post$beta0, main = "ACF: beta0 (after burn-in)")
# u1
plot(samples_post$u1, type = "l", main = "Trace: u1 (burn-in removed)",
ylab = expression(u[1]), xlab = "Iteration")
acf(samples_post$u1, main = "ACF: u1 (after burn-in)")
# v_U
plot(samples_post$v_U, type = "l", main = "Trace: v_U (burn-in removed)",
ylab = expression(v[U]), xlab = "Iteration")
acf(samples_post$v_U, main = "ACF: v_U (after burn-in)")
##### b
library(MASS)  # for mvrnorm
# log posterior up to a constant
log_posterior <- function(beta, u, v_U, X_list, y_list, vB, a0, b0) {
loglik <- 0
for (i in seq_along(X_list)) {
eta <- X_list[[i]] %*% beta + u[i]
loglik <- loglik + sum(y_list[[i]] * eta - log1p(exp(eta)))
}
penalty_beta <- -0.5 / vB * sum(beta^2)
penalty_u <- -0.5 / v_U * sum(u^2)
penalty_vU <- -(a0 + length(u)/2 + 1) * log(v_U) - b0 / v_U
return(loglik + penalty_beta + penalty_u + penalty_vU)
}
# Main sampler
sample_logistic_mh <- function(X_list, y_list, vB, a0, b0, n_iter = 10000,
Sigma_proposal, theta_init = NULL) {
p <- ncol(X_list[[1]])
n <- length(X_list)
# Initial values
if (is.null(theta_init)) {
beta <- rep(0, p)
u <- rnorm(n)
log_vU <- log(b0 / (a0 - 1))
} else {
beta <- theta_init$beta
u <- theta_init$u
log_vU <- theta_init$log_vU
}
# Storage
samples_beta <- matrix(NA, nrow = n_iter, ncol = p)
samples_u <- matrix(NA, nrow = n_iter, ncol = n)
samples_vU <- numeric(n_iter)
theta_curr <- c(beta, u, log_vU)
log_post_curr <- log_posterior(beta, u, exp(log_vU), X_list, y_list, vB, a0, b0)
for (t in 1:n_iter) {
theta_prop <- mvrnorm(1, mu = theta_curr, Sigma = Sigma_proposal)
beta_prop <- theta_prop[1:p]
u_prop <- theta_prop[(p + 1):(p + n)]
log_vU_prop <- theta_prop[p + n + 1]
vU_prop <- exp(log_vU_prop)
log_post_prop <- log_posterior(beta_prop, u_prop, vU_prop, X_list, y_list, vB, a0, b0)
log_accept_ratio <- log_post_prop - log_post_curr
if (log(runif(1)) < log_accept_ratio) {
theta_curr <- theta_prop
log_post_curr <- log_post_prop
}
samples_beta[t, ] <- theta_curr[1:p]
samples_u[t, ] <- theta_curr[(p + 1):(p + n)]
samples_vU[t] <- exp(theta_curr[p + n + 1])
}
return(list(beta = samples_beta, u = samples_u, vU = samples_vU))
}
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q3.R")
source("~/.active-rstudio-document")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1d.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1_compare.R")
mean(rs_means)
mean(is_means)
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1d.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1d.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/HW5/Q1d.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Traindata_generate.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Checking_sigma.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm3.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm3.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm3.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm3.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm3.R")
ggplot(plot_df, aes(x = PC1, y = PC2, color = subtype)) +
geom_point(size = 1.5, alpha = 0.8) +
theme_minimal() +
labs(title = paste("PCA of Estimated x (lambda =", lambda_val, ", clusters =", n_clusters_full, ")"))
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm3.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Traindata_generate.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Checking_sigma.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Traindata_generate.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Checking_sigma.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm3.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Checking_sigma.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm4.R")
ggplot(plot_df, aes(x = PC1, y = PC2, color = subtype)) +
geom_point(size = 1.5, alpha = 0.8) +
theme_minimal() +
labs(title = paste("PCA of Estimated x (lambda =", lambda_val, ", clusters =", n_clusters_full, ")"))
cat("True Omega mean distance:", between_true, "\n")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Algorithm4.R")
source("~/.active-rstudio-document")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/Checking_sigma.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0417generate.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0417generate.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0417generate.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0417generate.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0417generate.R")
ggplot(lambda_plot, aes(x = log10(lambda), y = value, color = metric)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
geom_hline(yintercept = res_dist$between_mean, linetype = "dashed", color = "black") +
annotate("text", x = log10(min(lambda_seq)) + 0.2, y = res_dist$between_mean, label = "True Between", hjust = 0, vjust = -0.5, size = 3) +
scale_x_reverse() +
theme_minimal() +
labs(
title = "Lambda Path: Cluster Count & Estimated Distance",
x = "log10(Lambda)",
y = "Value",
color = "Metric"
)
load("D:/MEGA/PhD/research/20250418/.Rhistory")
load("D:/MEGA/PhD/2025_Q1_spring/8054/project/0418.RData")
View(all_subtypes)
View(combined_data)
result_df
summary_df
View(x_results_list)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422_step0_generate_data.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422CVXR_single.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/chenwei/Downloads/0422CVXR_single.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422_step0_generate_data.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422_step0_generate_data.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422CVXR_single.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422_step0_generate_data.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422CVXR_single.R")
Omega_est[[1]]
Omega_est[[2]]
Omega_est[[3]]
View(X_raw_upper)
Omega_est_matrix <- do.call(rbind, Omega_est)
View(Omega_est_matrix)
dim(Omega_est_matrix)
Omega_est_matrix <- t(sapply(Omega_est, as.vector))
dim(Omega_est_matrix)
View(Omega_est_matrix)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422CVXR_single.R")
warnings()
Omega_est_array_CVXR <- t(sapply(Omega_est, as.vector)) # stack of omega est, dim = N * d
View(Omega_est_array_CVXR)
save.image("D:/MEGA/PhD/2025_Q1_spring/8054/project/0423_9data.RData")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422_step0_generate_data.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422CVXR_single.R")
dist_matrix_CVXR <- compute_omega_distance(Omega_true_list, Omega_est_list_CVXR)
print(result$status)
print(result$value)
str(Omega_est[[1]])
print(dist_matrix_CVXR)
# 格式化 lambda：小數點移除（e.g. 0.05 → "005", 1.2 → "12"）
lambda_label <- gsub("\\.", "", format(lambda, scientific = FALSE))
# 檔案名稱組合
file_name <- paste0("tau_N", N, "l", lambda_label, "_CVXR_baseline.rds")
# 儲存變數
saveRDS(
list(
X_raw_upper = X_raw_upper,
lambda = lambda,
rho_matrix_adjusted = rho_matrix_adjusted,
rho_matrix = rho_matrix,
Omega_est_array_CVXR = Omega_est_array_CVXR,
dist_matrix_CVXR = dist_matrix_CVXR
),
file = file_name
)
cat("✅ 儲存完成：", file_name, "\n")
gc()
baseline <- readRDS("tau_N9l5_CVXR_baseline.rds")
baseline$X_raw_upper
baseline$Omega_est_array_CVXR
source("~/.active-rstudio-document")
baseline$X_raw_upper
source("~/.active-rstudio-document")
View(Omega_est_matrix_AMA)
Omega_est_array_CVXR <- baseline$Omega_est_array_CVXR
View(Omega_est_matrix_AMA)
View(Omega_est_array_CVXR)
View(Omega_est_matrix_AMA)
source("~/.active-rstudio-document")
lambda = baseline$lambda
source("~/.active-rstudio-document")
View(Omega_est_matrix_AMA)
View(Omega_est_array_CVXR)
View(Omega_est_matrix_AMA)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
Omega_est_matrix_AMA <- 1
Omega_est_matrix_AMA <- ama_network_lasso(
X_raw_upper = baseline$X_raw_upper,
rho_matrix_adjusted = baseline$rho_matrix_adjusted,
lambda = 15,
eta = 1.0,
max_iter = 50000
)
source("~/.active-rstudio-document")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422_step0_generate_data.R")
# 建構 X_raw：將每筆資料的 adjusted Gamma 上三角展平
X_raw_upper <- t(sapply(1:N, function(i) {
hGamma <- combined_data[[i]]$hGamma
y      <- combined_data[[i]]$y
y_diff <- abs(outer(y, y, "-"))
y_sum  <- abs(outer(y, y, "+"))
adjusted <- hGamma - y_diff - y_sum
get_upper_triangle(adjusted)
}))
Omega_est_matrix_AMA
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422_step0_generate_data.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422CVXR_single.R")
View(Omega_est_array_CVXR)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0422CVXR_single.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
setwd("D:/MEGA/PhD/2025_Q1_spring/8054/project")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep.R")
summary_df_ama
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep_warmstart.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep_warmstart.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep.R")
ama_result$Lambda
View(ama_result)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429AMA_sweep_warmstart.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep.R")
admm_result <- network_lasso_admm_single(
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
max_iter = 1000,
tol_primal = 1e-4,
tol_dual = 1e-4,
rho_admm = 1.0,
quiet = TRUE
)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep_warmstart.R")
View(ama_result)
View(admm_result)
admm_result <- network_lasso_admm_single(
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
max_iter = 1000,
tol_primal = 1e-4,
tol_dual = 1e-4,
rho_admm = 1.0,
quiet = TRUE,
Pri.init = Pri.init.sweep,
Aux.init = Aux.init.sweep,
Dual.init = Dual.init.sweep
)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/algorithms_v4.R")
admm_result <- network_lasso_admm_single(
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
max_iter = 1000,
tol_primal = 1e-4,
tol_dual = 1e-4,
rho_admm = 1.0,
quiet = TRUE,
Pri.init = Pri.init.sweep,
Aux.init = Aux.init.sweep,
Dual.init = Dual.init.sweep
)
# 用上個迴圈的結果作為warm start
init.sweep <- admm_result$X
Aux.init.sweep <- admm_result$Z_list
Dual.init.sweep <- admm_result$U_list
admm_result <- network_lasso_admm_single(
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
max_iter = 1000,
tol_primal = 1e-4,
tol_dual = 1e-4,
rho_admm = 1.0,
quiet = TRUE,
Pri.init = Pri.init.sweep,
Aux.init = Aux.init.sweep,
Dual.init = Dual.init.sweep
)
check_admm_residuals <- function(X, Z_list, U_list, X_raw_upper, rho_matrix_adjusted, lambda, rho_admm) {
N <- nrow(X)
d <- ncol(X)
edge_list <- list()
for (i in 1:(N - 1)) {
for (j in (i + 1):N) {
if (rho_matrix_adjusted[i, j] > 0) {
edge_list[[length(edge_list) + 1]] <- c(i, j)
}
}
}
# === Step 1: primal residual ===
primal_residual <- 0
for (k in seq_along(edge_list)) {
i <- edge_list[[k]][1]
j <- edge_list[[k]][2]
zij <- Z_list[[k]]$zij
zji <- Z_list[[k]]$zji
primal_residual <- primal_residual +
sum((X[i, ] - zij)^2) +
sum((X[j, ] - zji)^2)
}
primal_residual <- sqrt(primal_residual)
# === Step 2: dual residual ===
# 用 Z 推回 X_new，再與 X 做差
delta_x <- matrix(0, nrow = N, ncol = d)
count_x <- rep(0, N)
for (k in seq_along(edge_list)) {
i <- edge_list[[k]][1]
j <- edge_list[[k]][2]
zij <- Z_list[[k]]$zij
zji <- Z_list[[k]]$zji
delta_x[i, ] <- delta_x[i, ] + rho_admm * (zij - U_list[[k]]$uij)
delta_x[j, ] <- delta_x[j, ] + rho_admm * (zji - U_list[[k]]$uji)
count_x[i] <- count_x[i] + rho_admm
count_x[j] <- count_x[j] + rho_admm
}
X_recomputed <- X * 0
for (i in 1:N) {
if (count_x[i] > 0) {
X_recomputed[i, ] <- (X_raw_upper[i, ] + delta_x[i, ]) / (1 + count_x[i])
} else {
X_recomputed[i, ] <- X_raw_upper[i, ]
}
}
dual_residual <- sqrt(sum((rho_admm * (X - X_recomputed))^2))
return(list(
primal_residual = primal_residual,
dual_residual = dual_residual
))
}
res <- network_lasso_admm_single(
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
max_iter = 1000,
tol_primal = 1e-4,
tol_dual = 1e-4,
rho_admm = 1.0,
quiet = TRUE,
Pri.init = Pri.init.sweep,
Aux.init = Aux.init.sweep,
Dual.init = Dual.init.sweep
)
View(res)
check_admm_residuals(
X = res$X,
Z_list = res$Z_list,
U_list = res$U_list,
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
rho_admm = 1.0
)
res <- network_lasso_admm_single(
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
max_iter = 1000,
tol_primal = 1e-4,
tol_dual = 1e-4,
rho_admm = 1.0,
quiet = TRUE,
Pri.init = Pri.init.sweep,
Aux.init = Aux.init.sweep,
Dual.init = Dual.init.sweep
)
check_admm_residuals(
X = res$X,
Z_list = res$Z_list,
U_list = res$U_list,
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
rho_admm = 1.0
)
res2 <- network_lasso_admm_single(
X_raw_upper = X_raw_upper,
rho_matrix_adjusted = rho_matrix_adjusted,
lambda = lambda_val,
max_iter = 1000,
tol_primal = 1e-4,
tol_dual = 1e-4,
rho_admm = 1.0,
quiet = TRUE,
Pri.init = res$X,
Aux.init = res$Z_list,
Dual.init = res$U_list
)
View(res2)
res[["res"]][["dual"]]
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
primal_residual
numeric(0)
source("~/.active-rstudio-document")
View(result)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep_warmstart.R")
source("~/.active-rstudio-document")
result <- admm_result
source("~/.active-rstudio-document")
View(result)
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep_warmstart.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep_warmstart.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep_warmstart.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429ADMM_sweep_warmstart.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/0429preprocessing_final.R")
setwd("D:/MEGA/PhD/2025_Q1_spring/8054/project/experiment/Sweep_raw")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/experiment/Sweep_raw/0429preprocessing_final.R")
setwd("D:/MEGA/PhD/2025_Q1_spring/8054/project/experiment/Sweep_warm_start_all")
source("0429preprocessing_final.R")
source("0429ADMM_sweep_warm_start_all.R")
source("0429ADMM_sweep_warmstart_all.R")
source("0429AMA_sweep_warmstart_all.R")
source("0429AMA_sweep_warmstart_all.R")
source("0429preprocessing_final.R")
source("0429AMA_sweep_warmstart_all.R")
source("D:/MEGA/PhD/2025_Q1_spring/8054/project/experiment/Sweep_warm_start_all/0429AMA_sweep_warmstart_all.R")
source("0429ADMM_sweep_warmstart_all.R")
setwd("D:/MEGA/PhD/2025_Q1_spring/8054/project/experiment/Sweep_warm_start_primal_only")
source("0429preprocessing_final.R")
source("0429ADMM_sweep_warmstart_primal.R")
source("0429AMA_sweep_warmstart_primal.R")
